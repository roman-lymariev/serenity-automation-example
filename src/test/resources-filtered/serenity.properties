#
# The WebDriver driver - firefox, chrome, iexplorer, htmlunit, safari.
#
webdriver.driver=${webdriver.driver}

#
# If using a provided driver, what type is it.
# The implementation class needs to be defined in the webdriver.provided.{type} system property.
#
# webdriver.provided.type=XXX
# webdriver.provided.customPhantomJs=XXX


#
# The URL to be used for remote drivers (including a selenium grid hub)
#
#webdriver.remote.url=${webdriver.remote.url}

#
# The driver to be used for remote drivers
#
# webdriver.remote.browser.version=XXX
# webdriver.remote.os=XXX
#webdriver.remote.driver=${webdriver.driver}

#
# What name should appear on the reports
#
serenity.project.name=Serenity Test Example

#
# A set of user-defined capabilities to be used to configure the WebDriver driver.
# Capabilities should be passed in as a space or semi-colon-separated list of key:value pairs, e.g.
# "build:build-1234; max-duration:300; single-window:true; tags:[tag1,tag2,tag3]"
#
serenity.driver.capabilities=elementScrollBehavior:1

#
# If set to true, WebElementFacade events and other step actions will be logged to the console.
#
serenity.verbose.steps=true

#
# Fine-grained control over when screenshots are to be taken.
# This property accepts the following values:
#
# FOR_EACH_ACTION
# BEFORE_AND_AFTER_EACH_STEP
# AFTER_EACH_STEP
# FOR_FAILURES
#
serenity.take.screenshots=FOR_FAILURES

#
# Show statistics for manual framework in the test reports.
#
serenity.report.show.manual.framework=false

#
# Use the same browser for all framework (the "Highlander" rule)
#
# serenity.use.unique.browser=false

#
# Base URL for the issue tracking system to be referred to in the reports.
# If defined, any issues quoted in the form #1234 will be linked to the relevant
# issue in the issue tracking system. Works with JIRA, Trac etc.
#
#serenity.issue.tracker.url=https://proactioneu.ent.cgi.com/jira/
#jira.url=https://test.jira.server
#jira.project=
#jira.user=
#jira.password=

#
# Redimension the browser to enable larger screenshots.
#
#
serenity.browser.height=1080
serenity.browser.width=1920

#
# How long webdriver waits for elements to appear by default, in milliseconds.
#

serenity.timeout=5000
webdriver.timeouts.implicitlywait=5000
webdriver.timeouts.pageloadtimeout=5000

#
# How long webdriver waits by default when you use a fluent waiting method, in milliseconds.
#
webdriver.wait.for.timeout=5000

#
# Enable JQuery integration.
# If set to true (the default), JQuery will be injected into any page that does not already have it.
# You can turn this option off for performance reasons if you are not using JQuery selectors.
#
serenity.jquery.integration=false

#
# Three levels are supported: QUIET, NORMAL and VERBOSE
#
serenity.logging=NORMAL

#
# Determine what the lowest level requirement (test cases, feature files, framework.story files, should be
# called. 'Story' is used by default. 'feature' is a popular alternative.
#
# serenity.lowest.requirement.type=feature

#
# The hierarchy of requirement types.
# This is the list of requirement types to be used when reading requirements from the file system
# and when organizing the reports. It is a comma-separated list of tags.The default value is: capability, feature
#
# serenity.requirements.types=theme

#
# Normally, Thucydides uses SmartElementLocatorFactory, an extension of the AjaxElementLocatorFactory
# when instantiating page objects. This is to ensure that web elements are available and usable before they are used.
# For alternative behaviour, you can set this value to DisplayedElementLocatorFactory, AjaxElementLocatorFactory or DefaultElementLocatorFactory.
#
serenity.locator.factory=AjaxElementLocatorFactory

#
# Write the console headings using ascii-art ("ascii", default value) or in normal text ("normal")
#
serenity.console.headinds=ascii
serenity.console.colors=false

#
# Stack traces are by default decluttered for readability.
# For example, calls to instrumented code or internal test libraries is removed.
# This behaviour can be deactivated by setting this property to false.
#
simplified.stack.traces=false

#
# Run through the steps without actually executing them.
#
# serenity.dry.run=XXX

#
# Keep the Thucydides session data between framework.
# Normally, the session data is cleared between framework.
#
# serenity.maintain.session=false

#
# Set the JBehave ignoreFailuresInStories options
#
ignore.failure.in.framework.story=true

#
# How long before the JBehave story time out (defaults to 300 seconds, or 5 minutes).
# Note that this applies to ALL of the JBehave story as a whole (i.e. the total test
# time for all of the framework), not the individual scenario.
#
story.timeout.in.secs=300000

#
# JBehave meta filters expressions, separated by commas.
# These use the meta annotations in the JBehave framework.story to decide what framework.story to
# execute. See http://jbehave.org/reference/stable/meta-filtering.html for details
# on how the metafilter syntax works.
#
# metafilter=XXX

#
# Force Serenity to restart the browser before each scenario.
#
restart.browser.each.scenario=true

#
# Reset step libraries in JBehave step definitions for each scenario.
# If this property is set to true (the default), any @Step-annotated member variables in JBehave step definitions
# will be reinitialized before each scenario.
#
# reset.steps.each.scenario=XXX

#
# Define a directory for the .framework.story files, inside src/test/resources. By default, this is 'framework.story'
#
# framework.story.directory=XXX

#
# If the JBehave framework.story are in a JAR file, we need to provide a semi-colon separated list of packages for
# the test runner to look in, e.g. "/my/package;/my/other/package"
# If the framework.story are in the root package or in the "framework.story" folder, this is not required.
#
# jbehave.framework.story.packages=XXX

#
# Controls the ignoreFailuresInView flag in JBehave (see http://jbehave.org/reference/stable/running-stories.html).
#
ignore.failures.in.view=true
